* TooLoo

Got an overwhelming number of command line scripts and functions? So
many you've actually started to forget what options you have available,
or what some of them do? Try TooLoo!

* What does it do?
:PROPERTIES:
:CUSTOM_ID: what-does-it-do
:END:
TooLoo allows provides a [[https://en.wikipedia.org/wiki/Full-text_search][full text search]] of the name, description, and details of
your scripts. When a script intooloodes a "help" command, TooLoo will call it and
display current usage docs instead of potentially outdated ones from its cache.

Scroll down to see some examples of its output.

** Future looking
:PROPERTIES:
:CUSTOM_ID: future-looking
:END:
The intent is to support [[https://tldr.sh/][tldr style "cheats"]] for
your scripts too. The example TOML template below contains commented out
cheats if you feel like writing them now, but TooLoo currently ignores that
data.

Being able to arrow through search results and choose one to see the
full details of.

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
TooLoo is written in [[https://www.raku.org/][Raku]], and uses the
[[https://github.com/ugexe/zef][zef]] package manager for installation.

If you've already got Raku and zef installed then just run:

=zef install TooLoo=

** Upgrading
:PROPERTIES:
:CUSTOM_ID: upgrading
:END:
The 2.0 change has a different database structure, and now adheres to
the XDG Base Directory specification for where it stores things.

So, first step is to run =zef upgrade TooLoo=

The easiest way to upgrade your data is to just run it again to set up a
new empty db in the new location. Then import re-import all your toml
files with something like this:

#+begin_src sh
find . -name '*.meta.toml' -exec tooloo add '{}' \; -exec sleep 1 \;
#+end_src

The =sleep= is important, to guarantee you don't have database issues
with the different processes competing for the file.

** Raku install quick-guide
:PROPERTIES:
:CUSTOM_ID: raku-install-quick-guide
:END:
Use Homebrew to install [[https://rakudo.org/][Rakudo]]. That's the Raku
virtual machine. If you install the [[https://rakudo.org/star][Rakudo
Star Bundle]] then [[https://github.com/ugexe/zef][zef]] will come along
for the ride. You can download it from those links, or install it with
homebrew.

#+begin_example
brew install rakudo-star
#+end_example

Now, go back and run the =zef install= command above.

* Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:
#+begin_example
Usage:
  tooloo -V|--version[=Any] [--verbose[=Any]]
  tooloo add <path> -- Add & updates documentation of a command with a .toml file,
                    or an ansiicast demo with a .cast file
  tooloo demo <command_name> -- play the asciicast demo of the specified command
  tooloo demos -- List all your commands that have associated asciicast demos
  tooloo find [<search_strings> ...] -- Execute a full text against documented commands.
                                     Search terms should be separate arguments.
  tooloo list -- List all your commands & their quick description
  tooloo list <filter> -- Lists a filtered subset of commands via filter: 'demos'
  tooloo remove <command_name> -- Remove a command from the database
  tooloo show <command_name> -- Display the full details of a specific command
  tooloo template <destination> -- Generate a blank TOML template at the specified location.
  tooloo update <path> -- Updates documentation of a command with a .toml file,
                       or an ansiicast demo with a .cast file

    <path>            Paths must end in .toml or .cast
    <filter>          Currently supported filters: demos
    <command_name>    The name of the executable
#+end_example

** Documenting a new Command
:PROPERTIES:
:CUSTOM_ID: documenting-a-new-command
:END:
The first step is to create a [[https://toml.io/en/][TOML file]] for
each cli tool you wish to document. TooLoo doesn't care where these live.
My advice is to put them alongside your script, so that when you share
your script with others, it can go along for the ride, even if they're
not using TooLoo, TOML is still very readable.

TooLoo doesn't care what the file is named, so long as it ends with =.toml=
but personally I've been using the convention of
=<command_name>.meta.toml= and putting it in the same directory as the
command I'm documenting.

The =template= comand will generate a TOML file for you where you just
have to fill in the blanks.

1. run =tooloo template path/to/my_command.meta.toml=

For example: If you have a =foo= command you'd make a =foo.meta.toml=
file. It doesn't matter if you're documenting an executable or a shell
function.

1. Edit your new TOML file.
2. run =tooloo add path/to/my_command.meta.toml=

That's it. If you ever need to update / change the documentation just
edit the TOML file and run =tooloo update <path/to/my_command.meta.toml>=.
It'll find the command with the matching name in the database, and
replace it.

*** Documentation Details
:PROPERTIES:
:CUSTOM_ID: documentation-details
:END:
The comments in the generated template should be enough to document your
command, but here are some additional notes.

Whenever there's a list =short_description= will be used. Depending on
your personal usage =description= may not be worth it. However, if
you're exporting and generating a static web site from tooloo you'll
definitely want that.

The Usage section of each command is generated on the fly whenever
possible. Some commands don't have a =--help= option or anything
similar, in which case you'll need to fill in the =fallback_usage=. When
doing so, be sure to not use any tabs. They'll muck with the table
that's displayed.

** Showing a command
:PROPERTIES:
:CUSTOM_ID: showing-a-command
:END:
=tooloo show <command_name>= will display the name, description, and usage
of the specified command (if found).

Output looks like this:

#+begin_example
❯ tooloo show rg-ignores
rg-ignores : finds files that rg may be using to ignore patterns

USAGE: rg-ignores <path>

       Use me when rg isn't finding something you expect
       and rg --hidden isn't helping.
       Looks for files that RipGrep will consult
       in order to find patterns to ignore.

       Note: using --hidden --no-ignore is a short term fix

--------------------
type: executable
lang: bash
location: /Users/masukomi/bin/rg-ignores

source repo: https://github.com/masukomi/masuconfigs
source url: https://github.com/masukomi/masuconfigs/blob/master/bin/rg-ignores
#+end_example

** Finding a command
:PROPERTIES:
:CUSTOM_ID: finding-a-command
:END:
=tooloo find <search terms>= Don't bother quoting the search terms.
Something like =tooloo find foo bar baz= is fine.

TooLoo will perform a full text search for your terms on the name,
description, and language fields, and display the results.

If you want more details, run =tooloo show <command name>= for the command
you've found.

Output looks like this:

#+begin_example
❯ tooloo find find
rg-ignores          | finds files that rg may be using to ignore patterns
git-oldest-ancestor | finds the oldest common ancestor between two git treeishes
#+end_example

** Listing all commands
:PROPERTIES:
:CUSTOM_ID: listing-all-commands
:END:
=tooloo list= will list everything for you. Output looks like this:

#+begin_example
❯ tooloo list
backtrace_details   | Pairs a backtrace with the corresponding lines of code
bak                 | bak moves or copies the proffered file to a .back version
blankless           | converts whitespace-only lines to empty lines.
color_test          | outputs a smooth gradient band along the RGB spectrum
git-branch-pr       | Shows or opens the Pull Request for the current branch
git-oldest-ancestor | finds the oldest common ancestor between two git treeishes
hr                  | outputs a horizontal rule the width of your terminal
is_brewed           | indicates if a package is installed via homebrew
rg-ignores          | finds files that rg may be using to ignore patterns
watch_when          | Polls a command and reports when its output changes
#+end_example

** Updating a command
:PROPERTIES:
:CUSTOM_ID: updating-a-command
:END:
=tooloo update <path/to/my_command.meta.toml>= will find the existing
command with the name specified in the TOML and update its data. If you
have changed the name of the command you'll need to remove and add
instead of update.

** Removing a command
:PROPERTIES:
:CUSTOM_ID: removing-a-command
:END:
=tooloo remove <command_name>= will remove the command with the specified
name.

** Syncing between machines
:PROPERTIES:
:CUSTOM_ID: syncing-between-machines
:END:
There's no inherent syncing here. Sorry. You can copy the db from
=~/.config/tooloo/database.db= to another machine, or, you can boot it up
on a new system and run something like this to ingest all your toml
files.

#+begin_src sh
find ~/folder/with/my/tooloo_toml_files -name "*.meta.toml" -exec tooloo add '{}' \;
#+end_src

** Generating a Static Blog
:PROPERTIES:
:CUSTOM_ID: generating-a-static-blog
:END:
TooLoo can export Markdown files in order to generate a static blog. Right
now it's expecting that you'll be using [[https://gohugo.io/][Hugo]]
along with our
[[https://github.com/masukomi/tooloo_blank_hugo_site][default site
structure]], or more likely, some beautifully tweaked variant of it.

To generate your blog run
=tooloo export hugo ~/path/to/tooloo_blank_hugo_site/content/all_commands=.
The theme has a concept of "chapters" and "all_commands" is the first
"chapter". You can, of course, change this. It's ultimately a variation
of the [[https://github.com/matcornic/hugo-theme-learn][Hugo Learn
Theme]] which has [[https://learn.netlify.app/][good documentation]].

* Why is it called "TooLoo"?

1. It's short for "Tool Lookup": Too(l) Loo(kup) -> TooLoo
2. It's fun to say.
3. The .dev domain was available.
4. The original name was likely to be misspelled.
5. It allows me to accommodate future features documenting more than just command line things.

* Contributing
:PROPERTIES:
:CUSTOM_ID: contributing
:END:
See
[[https://github.com/masukomi/TooLoo/blob/main/CONTRIBUTING.md#readme][CONTRIBUTING.md]]
# LICENSE

Copyright 2022 [[https://masukomi.org][Kay Rhodes]] (a.k.a. masukomi).
Distributed under the GPL 3.0 License.
